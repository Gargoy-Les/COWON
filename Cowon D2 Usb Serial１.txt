Index: firmware/export/usb_core.h
===================================================================
--- firmware/export/usb_core.h	(révision 20023)
+++ firmware/export/usb_core.h	(copie de travail)
@@ -23,8 +23,8 @@
 
 #ifndef BOOTLOADER
 
-//#define USB_SERIAL
-#define USB_STORAGE
+#define USB_SERIAL
+//#define USB_STORAGE
 #define USB_CHARGING_ONLY
 #else /* BOOTLOADER */
 #define USB_CHARGING_ONLY
Index: firmware/export/config-cowond2.h
===================================================================
--- firmware/export/config-cowond2.h	(révision 20023)
+++ firmware/export/config-cowond2.h	(copie de travail)
@@ -8,11 +8,14 @@
 
 #define MODEL_NAME   "Cowon D2"
 
-#if 0
+#if 1
 #define HAVE_USBSTACK
 #define USE_ROCKBOX_USB
+//#define USB_NO_HIGH_SPEED
 #define USB_VENDOR_ID 0x0e21
 #define USB_PRODUCT_ID 0x0800
+#define USB_NUM_ENDPOINTS 3
+#define USB_DEVBSS_ATTR    IBSS_ATTR
 #endif
 
 
Index: firmware/system.c
===================================================================
--- firmware/system.c	(révision 20023)
+++ firmware/system.c	(copie de travail)
@@ -24,6 +24,7 @@
 #include "kernel.h"
 #include "thread.h"
 #include "string.h"
+#include "file.h"
 
 #ifndef SIMULATOR
 long cpu_frequency SHAREDBSS_ATTR = CPU_FREQ;
Index: firmware/target/arm/usb-tcc.c
===================================================================
--- firmware/target/arm/usb-tcc.c	(révision 20023)
+++ firmware/target/arm/usb-tcc.c	(copie de travail)
@@ -122,7 +122,7 @@
     int flags;
     ep = ep & 0x7f;
 
-    if (ep < 1 || ep > NUM_ENDPOINTS)
+    if (ep < 1 || ep > USB_NUM_ENDPOINTS)
         return ;
 
     flags = disable_irq_save();
@@ -263,25 +263,17 @@
 static
 void handle_ep_in(struct tcc_ep *tcc_ep, uint16_t stat)
 {
-    uint8_t *buf = tcc_ep->buf;
-    uint16_t *wbuf = (uint16_t *) buf;
-    int wcount;
-    int count;
-    int i;
+    unsigned char *buf = tcc_ep->buf;
+    int count, i;
 
     if (tcc_ep->dir != USB_DIR_OUT) {
         panicf_my("ep%d: is input only", tcc_ep->id);
     }
 
-    wcount = TCC7xx_USB_EP_BRCR;
+    count = TCC7xx_USB_EP_BRCR*2;
 
-    DEBUG(2, "ep%d: %04x %04x", tcc_ep->id, stat, wcount);
-
-    /* read data */
-    count = wcount * 2;
     if (stat & TCC7xx_USP_EP_STAT_LWO) {
         count--;
-        wcount--;
     }
 
     if (buf == NULL)
@@ -289,12 +281,17 @@
     if (tcc_ep->max_len < count)
         panicf_my("Too big packet: %d excepted %d %x", count, tcc_ep->max_len, TCC7xx_USB_EP_CTRL);
 
-    for (i = 0; i < wcount; i++)
-        wbuf[i] = *tcc_ep->ep;
 
-    if (count & 1) { /* lwo */
-        uint16_t tmp = *tcc_ep->ep;
-        buf[count - 1] = tmp & 0xff;
+    i = 0;
+    while (i < count)
+    {
+        unsigned short d = *tcc_ep->ep;
+        if (i < count)
+            buf[i] = d & 0xff;
+        i++;
+        if (i < count)
+            buf[i] = (d >> 8) & 0xff;
+        i++;
     }
 
     tcc_ep->buf = NULL;
@@ -505,16 +502,19 @@
 
 static int usb_drv_write_packet(volatile unsigned short *buf, unsigned char *data, int len, int max)
 {
-    uint16_t  *wbuf = (uint16_t *) data;
-    int count, i;
+    int i;
 
     len = MIN(len, max);
-    count = (len + 1) / 2;
 
     TCC7xx_USB_EP_BWCR = len;
 
-    for (i = 0; i < count; i++)
-        *buf = *wbuf++;
+    i = 0;
+    while (len - i >= 2) {
+        *buf = data[i] | (data[i + 1] << 8);
+        i += 2;
+    }
+    if (i < len)
+        *buf = data[i];
 
     return len;
 }
@@ -574,7 +574,7 @@
 int usb_drv_send_nonblocking(int endpoint, void *ptr, int length)
 {
     int flags;
-    int rc = 0, count = length;
+    int rc = 0;
     char *data = (unsigned char*) ptr;
     struct tcc_ep *ep = &tcc_endpoints[endpoint & 0x7f];
 
@@ -591,7 +591,7 @@
 
     ep->buf = data;
     ep->max_len = length;
-    ep->count = count;
+    ep->count = 0;
 
     TCC7xx_USB_INDEX = ep->id;
 #if 1
@@ -744,6 +744,10 @@
         usb_core_exit();
 }
 
+void usb_attach(void)
+{
+	usb_enable(true);
+}
 
 int usb_detect(void)
 {
Index: firmware/usb.c
===================================================================
--- firmware/usb.c	(révision 20023)
+++ firmware/usb.c	(copie de travail)
@@ -284,7 +284,9 @@
                  * USB_CONNECTED. */
                 usb_state = USB_POWERED;
 #endif
+#ifdef USB_STORAGE
                 usb_core_enable_driver(USB_DRIVER_MASS_STORAGE, true);
+#endif
                 usb_core_enable_driver(USB_DRIVER_CHARGING_ONLY, false);
 
                 /* Check any drivers enabled at this point for exclusive storage
